# conda python365 env for sliding-puzzle

    conda create --name python365 python=3.6.5
    pip install psycopg2

# container for database of sliding-puzzle

    docker pull postgres:10.4
    docker images
    REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
    postgres            10.4                65bf726222e1        9 days ago          236MB

    docker run --name pg -p 65432:5432 -e POSTGRES_PASSWORD=123qwe -d postgres:10.4
    78779b6363ea1935677718c9d006dc6b3d44070196ca444addaa30894b564709

    docker ps
    CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                     NAMES
    78779b6363ea        postgres:10.4       "docker-entrypoint..."   10 seconds ago      Up 8 seconds        0.0.0.0:65432->5432/tcp   pg

    docker exec -it pg /bin/bash

    root@78779b6363ea:/# psql -h localhost -p 5432 -U postgres
    psql (10.4 (Debian 10.4-2.pgdg90+1))
    Type "help" for help.

    postgres=# CREATE ROLE myuser WITH LOGIN PASSWORD '123qwe' ;
    CREATE ROLE

    postgres=# \dg
                                       List of roles
     Role name |                         Attributes                         | Member of
    -----------+------------------------------------------------------------+-----------
     myuser    |                                                            | {}
     postgres  | Superuser, Create role, Create DB, Replication, Bypass RLS | {}

    postgres=# CREATE DATABASE mydatabase WITH OWNER = myuser ENCODING = 'UTF8' ;
    CREATE DATABASE

    postgres=# GRANT ALL privileges ON DATABASE mydatabase TO myuser ;
    GRANT

    postgres=# \l
                                     List of databases
        Name    |  Owner   | Encoding |  Collate   |   Ctype    |   Access privileges
    ------------+----------+----------+------------+------------+-----------------------
     mydatabase | myuser   | UTF8     | en_US.utf8 | en_US.utf8 | =Tc/myuser           +
                |          |          |            |            | myuser=CTc/myuser
     postgres   | postgres | UTF8     | en_US.utf8 | en_US.utf8 |
     template0  | postgres | UTF8     | en_US.utf8 | en_US.utf8 | =c/postgres          +
                |          |          |            |            | postgres=CTc/postgres
     template1  | postgres | UTF8     | en_US.utf8 | en_US.utf8 | =c/postgres          +
                |          |          |            |            | postgres=CTc/postgres
    (4 rows)

    postgres=# \q

    root@78779b6363ea:/# echo "psql -h localhost -p 5432 -U myuser -d mydatabase" > mydatabase.sh
    root@78779b6363ea:/# chmod +x mydatabase.sh
    root@78779b6363ea:/# ./mydatabase.sh
    psql (10.4 (Debian 10.4-2.pgdg90+1))
    Type "help" for help.

    mydatabase=> \q


# install and use graph-tool by container

    docker pull tiagopeixoto/graph-tool
    
    docker run \
    -p 8888:8888 \
    -v /Users/rwoo/02_WorkSpace/99_tmp/graph-workspace:/home/user/graph-workspace \
    -v /tmp/.X11-unix:/tmp/.X11-unix \
    -it -u user -w /home/user --rm -e DISPLAY=$DISPLAY tiagopeixoto/graph-tool bash
    
    jupyter notebook --ip 0.0.0.0

    from graph_tool.all import *
    g = Graph()
    g = Graph(directed=False)

    v1 = g.add_vertex()
    v2 = g.add_vertex()

    e = g.add_edge(v1, v2)

    graph_draw(g, vertex_text=g.vertex_index, vertex_font_size=18, output_size=(200, 200), output="two-nodes.png")

# get graph data from database

    mydatabase=> select id,next_ids from states order by id limit 11 ;
     id |  next_ids
    ----+------------
      1 | 2,3
      2 | 4,5,1
      3 | 6,7,1
      4 | 8,2
      5 | 9,10,2,11
      6 | 12,13,14,3
      7 | 15,3
      8 | 16,4,17
      9 | 18,19,5
     10 | 20,5,21
     11 | 5,22,23
    (11 rows)

    mydatabase=> select id||','||next_ids as graph from states order by id limit 11 ;
        graph
    --------------
     1,2,3
     2,4,5,1
     3,6,7,1
     4,8,2
     5,9,10,2,11
     6,12,13,14,3
     7,15,3
     8,16,4,17
     9,18,19,5
     10,20,5,21
     11,5,22,23
    (11 rows)

# install python3 by brew and graph-tool

    brew install python
    brew install graph-tool
    python3 location = /usr/local/Cellar/python3/3.6.5_1/Frameworks/Python.framework/Versions/3.6/bin/python3

# table to tsv file

    mydatabase=> \copy (select * from states order by id) to '/states.tsv' ;
    COPY 181440

    mydatabase=> \q

    root@78779b6363ea:/# ls -l states.tsv
    -rw-r--r--   1  501 dialout 18159216 Jun 28 07:42 states.tsv

    root@78779b6363ea:/# read escape sequence

    docker cp pg:/states.tsv ~/states.tsv
    head states.tsv
    1	123456780	111112120	123450786;123456708	2,3	{"x": 2, "y": 0, "reword": 0}
    2	123450786	112120112	120453786;123405786;123456780	4,5,1	{"x": 2, "y": 1, "reword": 0}
    3	123456708	111121202	123406758;123456078;123456780	6,7,1	{"x": 1, "y": 0, "reword": 0}
    4	120453786	120112111	102453786;123450786	8,2	{"x": 2, "y": 2, "reword": 0}
    5	123405786	121202121	103425786;123045786;123450786;123485706	9,10,2,11	{"x": 1, "y": 1, "reword": 0}
    6	123406758	121202121	103426758;123046758;123460758;123456708	12,13,14,3	{"x": 1, "y": 1, "reword": 0}
    7	123456078	111211021	123056478;123456708	15,3	{"x": 0, "y": 0, "reword": 0}
    8	102453786	202121111	012453786;120453786;152403786	16,4,17	{"x": 1, "y": 2, "reword": 0}
    9	103425786	202121111	013425786;130425786;123405786	18,19,5	{"x": 1, "y": 2, "reword": 0}
    10	123045786	211021211	023145786;123405786;123745086	20,5,21	{"x": 0, "y": 1, "reword": 0}



